import { router } from "@inertiajs/react";
import axios from "axios";
import { useEffect, useState } from "react";


const expenseCategories = [
  { id: 1, name: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", icon: "üçî" },
  { id: 2, name: "‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", icon: "üöó" },
  { id: 3, name: "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢", icon: "üè†" },
  { id: 4, name: "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ", icon: "üõí" },
  { id: 5, name: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", icon: "üõ†Ô∏è" },
];

const incomeCategories = [
    { id: 6, name: "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", icon: "üíµ" },
    { id: 7, name: "‡πÇ‡∏ö‡∏ô‡∏±‡∏™", icon: "üéâ" },
    { id: 8, name: "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", icon: "üè¢" },
    { id: 9, name: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" },
    { id: 10, name: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", icon: "üõ†Ô∏è" },
  ];

const AddTransaction = () => {
  const params = new URLSearchParams(window.location.search);
  const transactionId = params.get("id"); // ‡∏î‡∏∂‡∏á id ‡∏à‡∏≤‡∏Å URL

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ state ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏™‡∏°‡∏≠
  const [amount, setAmount] = useState("");
  const [note, setNote] = useState("");
  const [transactionType, setTransactionType] = useState<"expense" | "income">("expense");
  const [category, setCategory] = useState(expenseCategories[0].id);

  const categories = transactionType === "expense" ? expenseCategories : incomeCategories;

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  useEffect(() => {
    if (transactionId) {
        axios.get(`/transactions/${transactionId}`)
            .then(response => {
                const data = response.data;
                setAmount(data.amount.toString());
                setNote(data.description || "");
                setTransactionType(data.transaction_type);
                setCategory(data.category_id);
            })
            .catch(error => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", error));
    }
}, [transactionId]);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ transactionType ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ category ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  useEffect(() => {
    const newCategoryList = transactionType === "expense" ? expenseCategories : incomeCategories;
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤ category ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å
    if (!newCategoryList.some((cat) => cat.id === category)) {
      setCategory(newCategoryList[0].id);
    }
  }, [transactionType]);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡πÅ‡∏û‡∏î
  const handleKeyPress = (key: string) => {
    if (amount === "Error") setAmount("");

    if (key === "=") {
      try {
        const result = eval(amount);
        if (!isNaN(result)) {
          setAmount(result.toString());
        } else {
          setAmount("Error");
        }
      } catch {
        setAmount("Error");
      }
    } else {
      setAmount((prev) => prev + key);
    }
  };

  // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleDelete = () => {
    setAmount((prev) => prev.slice(0, -1));
  };

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (POST ‡∏´‡∏£‡∏∑‡∏≠ PUT)
  const handleSubmit = async () => {
    if (!amount) {
        console.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
    }

    const finalAmount =
    transactionType === "expense"
        ? `-${Math.abs(Number(amount))}`
        : `${Math.abs(Number(amount))}`;

    const transaction_date = new Date().toISOString().split("T")[0];

    if (!category) {
        console.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà");
        return;
    }

    const selectedCategory = categories.find((cat) => cat.id === category);
    if (!selectedCategory) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö category ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å!");
        return;
    }

    const csrfToken =
    document.querySelector('meta[name="csrf-token"]')?.getAttribute("content") || "";
    if (!csrfToken) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö CSRF Token");
        return;
    }

    const headers = {
        "Content-Type": "application/json",
        "X-CSRF-TOKEN": csrfToken,
    };

    const transactionData = {
        category_id: category, // ‡∏™‡πà‡∏á category_id ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        amount: finalAmount,
        transaction_type: transactionType,
        description: note,
        transaction_date,
    };

    console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", transactionData);

    try {
        let response;
        if (transactionId) {
            response = await axios.put(`/transactions/${transactionId}`, transactionData, { headers });
        } else {
            response = await axios.post("/transactions", transactionData, { headers });
        }

        console.log("‚úÖ Response ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", response.data);

        if (response.status === 200 || response.status === 201) {
            console.log("‚úÖ ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
            window.dispatchEvent(new Event("transactionAdded")); // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á event ‡πÉ‡∏´‡πâ `Dashboard.tsx` ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á Dashboard...");
            window.location.href = "/dashboard"; // ‚úÖ ‡πÉ‡∏ä‡πâ window.location ‡πÄ‡∏õ‡πá‡∏ô fallback
        } else {
            console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", response.status);
        }
    } catch (error: any) {
        console.error("‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", error.response?.data || error.message);
    }
};

  return (
    <div className="min-h-screen bg-amber-50">
      <div className="bg-amber-400 text-white p-4 flex justify-between items-center shadow-md">
        <button onClick={() => history.back()} className="text-xl">
          üîô
        </button>
        <h2 className="text-lg font-semibold">
          {transactionType === "expense" ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"}
        </h2>
      </div>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢/‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö */}
      <div className="flex justify-center mt-4">
        <button
          onClick={() => setTransactionType("income")}
          className={`px-4 py-2 mx-2 rounded-lg shadow-md text-lg font-semibold ${
            transactionType === "income" ? "bg-green-400 text-white" : "bg-gray-200 text-gray-700"
          }`}
        >
          ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö üí∞
        </button>
        <button
          onClick={() => setTransactionType("expense")}
          className={`px-4 py-2 mx-2 rounded-lg shadow-md text-lg font-semibold ${
            transactionType === "expense" ? "bg-red-400 text-white" : "bg-gray-200 text-gray-700"
          }`}
        >
          ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ üí∏
        </button>
      </div>

      {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
      <div className="bg-white p-4 rounded-lg shadow-lg mx-4 mt-4">
        <h3 className="text-lg font-semibold text-gray-700 mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h3>
        <div className="grid grid-cols-4 gap-4">
          {categories.map((cat) => (
            <button
              key={cat.id}
              onClick={() => {
                setCategory(cat.id);
                console.log("üü¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà:", cat.id);
              }}
              className={`p-3 rounded-lg shadow-md text-center ${
                category === cat.id ? "bg-amber-400 text-white" : "bg-gray-100 text-gray-700 hover:bg-amber-100"
              }`}
            >
              <span className="text-2xl">{cat.icon}</span>
              <p className="text-sm mt-1">{cat.name}</p>
            </button>
          ))}
        </div>
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° */}
      <div className="bg-white p-4 rounded-lg shadow-lg mx-4 mt-4">
        <h3 className="text-lg font-semibold text-gray-700 mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h3>
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className="w-full p-4 text-3xl text-center bg-amber-100 rounded-lg"
            placeholder="‡∏ø0.00"
          />
          <input
            type="text"
            value={note}
            onChange={(e) => setNote(e.target.value)}
            className="w-full p-4 text-lg bg-amber-100 rounded-lg"
            placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
          />
        </div>
      </div>

      <div className="bg-amber-200 text-black p-6 mt-6 rounded-t-lg shadow-lg">
        <div className="grid grid-cols-4 gap-3 mt-4">
          {[
            "7",
            "8",
            "9",
            "+",
            "4",
            "5",
            "6",
            "-",
            "1",
            "2",
            "3",
            "*",
            ".",
            "0",
            "=",
            "/",
          ].map((key) => (
            <button
              key={key}
              onClick={() => handleKeyPress(key)}
              className="p-4 rounded-lg text-2xl font-semibold bg-amber-100 hover:bg-amber-400"
            >
              {key}
            </button>
          ))}
        </div>
        <div className="grid grid-cols-2 gap-3 mt-3">
          <button
            onClick={handleDelete}
            className="p-4 rounded-lg text-2xl font-semibold bg-red-500 hover:bg-red-600 text-white"
          >
            ‚Üê ‡∏•‡∏ö
          </button>
          <button
            onClick={handleSubmit}
            className="p-4 rounded-lg text-2xl font-semibold bg-green-500 hover:bg-green-600 text-white"
          >
            ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
        </div>
      </div>
    </div>
  );
};

export default AddTransaction;
